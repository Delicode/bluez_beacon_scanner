#!/usr/bin/python3

from __future__ import absolute_import, print_function, unicode_literals

from optparse import OptionParser, make_option
import dbus
import dbus.mainloop.glib
try:
	from gi.repository import GLib
except ImportError:
	import gobject as GObject
import bluezutils
import json
import websockets
import asyncio
import sys

devices = {}

def dbus_to_python(data):
	'''
		convert dbus data types to python native data types
	'''

	if isinstance(data, dbus.Byte):
		data = int(data)
	elif isinstance(data, dbus.String):
		data = str(data)
	elif isinstance(data, dbus.Boolean):
		data = bool(data)
	elif isinstance(data, dbus.Double):
		data = float(data)
	elif isinstance(data, dbus.Array):
		data = [dbus_to_python(value) for value in data]
	elif isinstance(data, (dbus.Int16, dbus.UInt16, dbus.Int32, dbus.UInt32, dbus.Int64, dbus.UInt64)):
		data = int(data)
	elif isinstance(data, dbus.Dictionary):
		new_data = dict()
		for key in data.keys():
			new_data[key] = dbus_to_python(data[key])
		data = new_data
	return data

def print_normal(address, properties):

	out = dict()
	out["address"] = str(dbus_to_python(address))

	for key in properties.keys():
		try:
			pkey = dbus_to_python(key)
			value = properties[key]
			pval = dbus_to_python(value)

			if key == "RSSI":
				out["RSSI"] = str(value)
			elif key == "ManufacturerData":

				# dictionary with an integer key and an array of bytes value
				manuinfo = dict()

				vendor = key
				identifier = [0]

				for k in pval:
					manuinfo["vendor"] = dbus_to_python(k)
					for b in pval[k]:
						identifier.append(int(dbus_to_python(b)))

				manuinfo["identifier"] = str(identifier)
				out["ManufacturerData"] = manuinfo
			elif key == "ServiceData":

				# dictionary with string key and an array of bytes

				servicedata = dict()
				arr = []

				for k in pval:
					servicedata["identifier"] = dbus_to_python(k)

					for b in pval[k]:
						arr.append(int(dbus_to_python(b)))

				servicedata["uuid"] = arr
				out["ServiceData"] = servicedata
		except Exception as e:
			print("Failed parsing data: " + str(e))

	properties["Logged"] = True

	print(json.dumps(out))

def interfaces_added(path, interfaces):
	properties = interfaces["org.bluez.Device1"]
	if not properties:
		return

	if path in devices:
		dev = devices[path]
		# combine the dictionaries
		devices[path] = {**devices[path], **properties}
	else:
		devices[path] = properties

	if "Address" in devices[path]:
		address = properties["Address"]
	else:
		address = "<unknown>"

	print_normal(address, devices[path])

def properties_changed(interface, changed, invalidated, path):
	if interface != "org.bluez.Device1":
		return

	if path in devices:
		dev = devices[path]
		# combine the dictionaries
		devices[path] = {**devices[path], **changed}
	else:
		devices[path] = changed

	if "Address" in devices[path]:
		address = devices[path]["Address"]
	else:
		address = "<unknown>"

	print_normal(address, devices[path])

if __name__ == '__main__':

	# get websocket port from args
	option_list = [
		make_option("-p", "--port", dest="port",
			help='port of a websocket server where this program connects in localost)',
			type=int, default=0)
	]

	parser = OptionParser(option_list=option_list)
	(options, args) = parser.parse_args()

	port = 0
	try:
		port = int(options.port)
	except Exception as e:
		print("Invalid port number given: " + str(p))
		sys.exit(1)

	if port == 0:
		print("Must specify websocket port in arguments")
		sys.exit(1)

	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()

	adapter = bluezutils.find_adapter(None)

	bus.add_signal_receiver(interfaces_added,
			dbus_interface = "org.freedesktop.DBus.ObjectManager",
			signal_name = "InterfacesAdded")

	bus.add_signal_receiver(properties_changed,
			dbus_interface = "org.freedesktop.DBus.Properties",
			signal_name = "PropertiesChanged",
			arg0 = "org.bluez.Device1",
			path_keyword = "path")

	om = dbus.Interface(bus.get_object("org.bluez", "/"),
				"org.freedesktop.DBus.ObjectManager")

	objects = om.GetManagedObjects()

	for path, interfaces in objects.items():
		if "org.bluez.Device1" in interfaces:
			devices[path] = interfaces["org.bluez.Device1"]

	adapter.SetDiscoveryFilter(dict())
	adapter.StartDiscovery()

	mainloop = GLib.MainLoop()
	mainloop.run()
