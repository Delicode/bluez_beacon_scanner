#!/usr/bin/python3

from __future__ import absolute_import, print_function, unicode_literals

from optparse import OptionParser, make_option
import dbus
import dbus.mainloop.glib

try:
	from gi.repository import GLib
except ImportError:
	import gobject as GObject

import bluezutils
import json
import sys
import websocket
from threading import Thread
import time

# Container for discovered BLE devices
devices = {}
mainloop = None
wsclient = None

# If false, the program can be run without a valid websocket
use_websocket = True

def print_message(msg):
	print(msg)
	sys.stdout.flush()

class WebsocketControl:
	ws = None
	port = 0
	url = ""
	ws_id = ""

	def __init__(self, p_url, p_port, p_wsid):
		self.port = p_port
		self.wsid = p_wsid
		self.url = p_url + ":" + str(self.port)
		print_message("opening websocket to: " + self.url)

		self.ws = websocket.WebSocketApp(self.url,
			header = None,
			on_open = self.on_open,
			on_message = self.on_message,
			on_error = self.on_error,
			on_close = self.on_close)

		websocket.enableTrace(False)

	def run_ws(self):
		Thread(target=self.ws.run_forever, kwargs=dict(ping_interval=10)).start()
		print_message("websocket thread returned")

	def on_message(ws, message):
		js_data = None

		try:
			js_data = json.loads(message)
		except Exception as e:
			print("Exception parsing received message as JSON: " + str(e))
			return

		if "type" not in js_data:
			print("no type in received websocket message: " + str(message))
			return

		global wsclient

		if js_data["type"] == "ping":
			msg = dict()
			msg["type"] = "pong"
			msg["message"] = dict()
			wsclient.ws.send(json.dumps(msg))
			return

	def on_error(ws, error):
		print_message("websocket error: " + str(error))

		# tell the websocket to exit in case it hasn't
		global wsclient
		wsclient.ws.close()

		global use_websocket
		if use_websocket == False:
			return

		# close the glib mainloop as it would hang the process
		mainloop.quit()

	def on_close(ws):
		print_message("websocket closed")

	def on_open(ws):
		print_message("webssocket opened")
		global wsclient

		out_msg = dict()
		contents = dict()
		contents["name"] = "ble-scanner"
		contents["client_type"] = "ble"
		contents["ws_id"] = wsclient.wsid

		out_msg["type"] = "hello"
		out_msg["message"] = contents

		wsclient.ws.send(json.dumps(out_msg))

def dbus_to_python(data):
	'''
		convert dbus data types to python native data types
	'''

	if isinstance(data, dbus.Byte):
		data = int(data)
	elif isinstance(data, dbus.String):
		data = str(data)
	elif isinstance(data, dbus.Boolean):
		data = bool(data)
	elif isinstance(data, dbus.Double):
		data = float(data)
	elif isinstance(data, dbus.Array):
		data = [dbus_to_python(value) for value in data]
	elif isinstance(data, (dbus.Int16, dbus.UInt16, dbus.Int32, dbus.UInt32, dbus.Int64, dbus.UInt64)):
		data = int(data)
	elif isinstance(data, dbus.Dictionary):
		new_data = dict()
		for key in data.keys():
			new_data[key] = dbus_to_python(data[key])
		data = new_data
	return data

def parse_data(address, properties):

	global wsclient

	out = dict()
	out["address"] = str(dbus_to_python(address))

	for key in properties.keys():
		try:
			pkey = dbus_to_python(key)
			value = properties[key]
			pval = dbus_to_python(value)

			if key == "RSSI":
				out["rssi"] = int(value)
			elif key == "ManufacturerData":

				# dictionary with an integer key and an array of bytes value
				manuinfo = dict()

				vendor = key
				identifier = []

				for k in pval:
					manuinfo["vendor"] = dbus_to_python(k)
					for b in pval[k]:
						temp = dbus_to_python(b)
						identifier.append(int(dbus_to_python(b)))

				manuinfo["data"] = str(identifier)
				out["manufacturerData"] = manuinfo
			elif key == "ServiceData":

				# dictionary with string key and an array of bytes

				servicedata = dict()
				arr = []

				for k in pval:
					uuid = dbus_to_python(k)
					if len(uuid) < 8:
						print_message("invalid uuid format: " + str(uuid))
						return

					# extract the 16-bit UUID from the 128-bit UUID
					servicedata["uuid"] = uuid[4:8]

					for b in pval[k]:
						arr.append(int(dbus_to_python(b)))

				servicedata["data"] = arr
				out["serviceData"] = [servicedata]
		except Exception as e:
			print_message("Failed parsing data: " + str(e))

	properties["Logged"] = True

	out_msg = dict()
	out_msg["type"] = "ble-discovery"
	out_msg["message"] = out

	global use_websocket
	if use_websocket:
		wsclient.ws.send(json.dumps(out_msg))

	print_message(json.dumps(out))

def interfaces_added(path, interfaces):
	properties = interfaces["org.bluez.Device1"]
	if not properties:
		return

	if path in devices:
		dev = devices[path]
		# combine the dictionaries
		devices[path] = {**devices[path], **properties}
	else:
		devices[path] = properties

	if "Address" in devices[path]:
		address = properties["Address"]
	else:
		address = "<unknown>"

	parse_data(address, devices[path])

def properties_changed(interface, changed, invalidated, path):
	if interface != "org.bluez.Device1":
		return

	if path in devices:
		dev = devices[path]
		# combine the dictionaries
		devices[path] = {**devices[path], **changed}
	else:
		devices[path] = changed

	if "Address" in devices[path]:
		address = devices[path]["Address"]
	else:
		address = "<unknown>"

	parse_data(address, devices[path])

if __name__ == '__main__':

	# get websocket port from args
	option_list = [
		make_option("-p", "--port", dest="port",
			help='port of a websocket server where this program connects in localhost',
			type=int, default=0),
		make_option("-w", "--wsid", dest="wsid",
			help='identifier used when connecting to a websocket server in localhost',
			type=str, default=""),

	]

	parser = OptionParser(option_list=option_list)
	(options, args) = parser.parse_args()

	port = 0
	try:
		port = int(options.port)
	except Exception as e:
		print_message("Invalid port number given: " + str(p))
		sys.exit(1)

	if port <= 0:
		print_message("Must specify a valid websocket port in arguments")
		sys.exit(1)

	wsid = options.wsid

	if len(wsid) == 0:
		print_message("Expecting parameter wsid to be non-empty")
		sys.exit(1)

	print_message("ble scanner connecting to port: " + str(port))

	# initialize dbus for ble scanning
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
	bus = dbus.SystemBus()

	adapter = bluezutils.find_adapter(None)

	bus.add_signal_receiver(interfaces_added,
			dbus_interface = "org.freedesktop.DBus.ObjectManager",
			signal_name = "InterfacesAdded")

	bus.add_signal_receiver(properties_changed,
			dbus_interface = "org.freedesktop.DBus.Properties",
			signal_name = "PropertiesChanged",
			arg0 = "org.bluez.Device1",
			path_keyword = "path")

	om = dbus.Interface(bus.get_object("org.bluez", "/"),
				"org.freedesktop.DBus.ObjectManager")

	objects = om.GetManagedObjects()

	for path, interfaces in objects.items():
		if "org.bluez.Device1" in interfaces:
			devices[path] = interfaces["org.bluez.Device1"]

	adapter.SetDiscoveryFilter(dict())
	adapter.StartDiscovery()

	mainloop = GLib.MainLoop()

	print_message("starting websocket")
	wsclient = WebsocketControl("ws://localhost", port, wsid)

	Thread(target=wsclient.run_ws).start()

	print_message("starting dlib mainloop")

	mainloop.run()
	print_message("dlib mainloop returned")

	# just in case the websocket is still open
	wsclient.ws.close()

